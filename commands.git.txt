 ----------------- Docs :- https://docs.chaicode.com/terminology/ 


Letâ€™s setup your email and username in this config file. I would recommend you to create an account on github and then use the email and username that you have created.

git config --global user.email "your-email@example.com"
git config --global user.name "Your Name"

See your git settings :-
git config --list

Show Hidden files and folders
ls -la  or  ls -l


Git Working Flow :- 
1. git init   --->>   Working directory
2. git add <fileName> or git add. or git add --a   --->>   Staging Area    or   here you can also unstage  
3. git commit -m "any message"    --->>>    Repo (Means locally)
4. git push origin main or main   --->> Github 


want to see the commits :- 
git log --oneline   // one line commit
git log


Standard Commit Messages :- 
git commit -m ""  ;   {Present tense, Imperative}  Means -->> "Add footer to the directory"


------------------------------ VIM -----------------------------

If by mistakenly press the command only git commit after staging the file so the vim editor will open :- 
1. simply add the commit message on the top  
2. Press Esc button 
3. Then press :wq


--------------------------------- Branches ------------------------------

. HEAD hamesha current branch ke tip pr point krta ha 

git branch  -->>  Current existing branches
git branch bug-fix  --->>  creating new branche
git switch bug-fix  --->> switch from master to bug-fix
git checkout orange-mode   --->> Shift to orange-mode branch after for just checkout
git branch -d bug-fix   --->> Delete any branch
git branch -D bug-fix  --->>  Forcefully Delete the branch 
git merge orange-mode   --->> Merge the branch with master
git merge --abort  --->> Undo the merging
git branch -m <old-branch-name> <new-branch-name>


-------------------------------- Stash -----------------------------

. When you use the git stash command, your uncommitted changes are saved (or "stashed") away so you can switch branches without losing them. These changes are not lost; they are stored in a stash list that you can access and apply later.

git stash  --->>  If you want to save your changes temporarily without committing them, you can stash them.
git stash list  --->>  This will show you a list of all stashes. Each stash will have an identifier like stash@{0}.
git stash apply  -->> This applies the most recent stash to your current working directory.
git stash apply stash@{n}   -->> If you have multiple stashes and you want to apply a specific one, you can do so by referring to its identifier:
git stash drop stash@{n}   --->>  After applying a stash, it will still be in the stash list until you remove it. To remove a specific stash:


git reset --hard  --->>  if you want to discard all local changes in your working directory:


----------------------------------- Diff ---------------------------------
git diff -->> This is the informatory command.
git diff --staged  --->> See the comparison between two staged files.
git diff <branch-name-one> <branch-name-two>   --->> See the comparison between two branches.
git diff <commit-hash-one>..<commit-hash-two>  --->> This is another common way to see the difference  